package patmat


object patmatWkst {
  val testString = Huffman.string2Chars("He")
  val testTimes = Huffman.times(testString)
  val testfreqs = Huffman.makeOrderedLeafList(testTimes)
    
    
          def insertSort(acc: List[Huffman.Leaf], remain: List[Huffman.Leaf], current: (Char,Int)): List[Huffman.Leaf] =
          remain match {
        		case List() => (Huffman.Leaf(current._1, current._2)) :: acc
        		case y :: ys => if(y.weight > current._2)  acc ::: Huffman.Leaf(current._1, current._2) :: remain
          		else List() //insertSort(remain.head :: acc, remain.tail, current)
      }
      
  var testSort = insertSort(List(), List(), ('e', 1))
  var testSort2 = insertSort(List(), testSort, ('H', 2))
  var testSort3 = insertSort(List(), testSort2, ('L', 3))
  var testSort4 = insertSort(List(), testSort3, ('a', 4))
 
}