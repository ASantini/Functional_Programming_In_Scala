package patmat


object patmatWkst {
  val testString = Huffman.string2Chars("He")     //> testString  : List[Char] = List(H, e)
  val testTimes = Huffman.times(testString)       //> testTimes  : List[(Char, Int)] = List((e,1), (H,1))
  val testfreqs = Huffman.makeOrderedLeafList(testTimes)
                                                  //> testfreqs  : List[patmat.Huffman.Leaf] = List(Leaf(H,1))
    
    
          def insertSort(acc: List[Huffman.Leaf], remain: List[Huffman.Leaf], current: (Char,Int)): List[Huffman.Leaf] =
          acc match {
        		case List() => (Huffman.Leaf(current._1, current._2)) :: acc.reverse
        		case y :: ys => if(y.weight > current._2) Huffman.Leaf(current._1, current._2) :: acc ::: remain
          		else insertSort(remain.head :: acc, remain.tail, current)
      }                                           //> insertSort: (acc: List[patmat.Huffman.Leaf], remain: List[patmat.Huffman.Lea
                                                  //| f], current: (Char, Int))List[patmat.Huffman.Leaf]
      
  var testSort = insertSort(List(), List(), ('e', 1))
                                                  //> testSort  : List[patmat.Huffman.Leaf] = List(Leaf(e,1))
  var testSort2 = insertSort(List(), testSort, ('H', 2))
 
}